#!/usr/bin/env node

/* eslint-disable consistent-return, global-require, no-console, import/no-dynamic-require */

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => { throw err; });

// static requires
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const {
  choosePort,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const customCompiler = require('../.webpack/customCompiler');
const webpackConfig = require('../.webpack/conf.webpack');
const createDevServerConfig = require('../.webpack/conf.webpackServer');
const appConfig = require('../conf.app');
const prepPublic = require('./prepPublic');

const isInteractive = process.stdout.isTTY;

const DEFAULT_PORT = appConfig.webpack.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

prepPublic();

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  .then((port) => {
    if(port == null){
      // We have not found a port.
      return;
    }
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const packageJSON = require(appConfig.paths.PACKAGE_JSON);
    const appName = packageJSON.name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = customCompiler(webpack, webpackConfig, appName, urls);

    // Load proxy config
    const proxyConfig = prepareProxy(packageJSON.proxy, appConfig.paths.DIST_PUBLIC);
    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, (err) => {
      if(err){
        return console.log(err);
      }
      if(isInteractive){
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
    });

    ['SIGINT', 'SIGTERM'].forEach((sig) => {
      process.on(sig, () => {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch((err) => {
    if(err && err.message){
      console.log(err.message);
    }
    process.exit(1);
  });
